{
  "genai-chat-codespaces" : {
    "prefix": "node-genai-github-models",
    "body": [
      "/*",
      " - GitHub Models are LLM models that are completely free, great for local development and testing. Remember to run this code from a Codespaces instance of change key to a personal access token",
      " - Check out https://github.com/microsoft/generative-ai-with-javascript, for a fun free course on how to use GenAi, it has time traveling :)",
      "*/",
      "",
      "import { OpenAI } from 'openai';",
      "",
      "const messages = [",
      "  {",
      "    \"role\": \"system\",",
      "    \"content\": \"You are a helpful chat bot\"",
      "  }",
      "{",
      "  \"role\": \"user\",",
      " \"content\": \"users prompt here\"",
      "}",
      "];",
      "",
      "const openai = new OpenAI({",
      "  baseURL: 'https://models.inference.ai.azure.com',",
      "  apiKey: process.env.GITHUB_TOKEN,",
      "});",
      "const completion = await openai.chat.completions.create({",
      "  model: 'gpt-4o-mini',",
      "  messages: messages,",
      "});",
      "",
      "console.log(`Response: ${completion.choices[0]?.message?.content}`);"
    ]
  },
  "genai-response-api-app" : {
    "prefix": "node-genai-response-api-app",
    "body": [
      "/*", 
      "  - Check out official docs at: https://github.com/openai/openai-node",
      "  - Check out https://github.com/microsoft/generative-ai-with-javascript, for a fun free course on how to use GenAi, it has time traveling :)",
      "*/",
      "",
      "import OpenAI from 'openai';",
      "",
      "const client = new OpenAI({",
      "  apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted",
      "});",
      "",
      "const response = await client.responses.create({",
      "  model: 'gpt-4o',",
      "  instructions: 'You are a coding assistant that talks like a pirate',",
      "  input: 'Are semicolons optional in JavaScript?',",
      "});",
      "",
      "console.log(response.output_text);"
    ]
  },
  "genai-response-api-client" : {
    "prefix": "node-genai-response-api-client",
    "body": [
      "/*", 
      "  - Check out official docs at: https://github.com/openai/openai-node",
      "  - Check out https://github.com/microsoft/generative-ai-with-javascript, for a fun free course on how to use GenAi, it has time traveling :)",
      "*/",
      "",
      "import OpenAI from 'openai';",
      "",
      "const client = new OpenAI({",
      "  apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted",
      "});"
    ],
    "description": "Generates a new instance of GenAi"
  },
  "genai-response-api-response" : {
    "prefix": "node-genai-response-api-response",
    "body": [
      "/*", 
      "  - Check out official docs at: https://github.com/openai/openai-node",
      "  - Check out https://github.com/microsoft/generative-ai-with-javascript, for a fun free course on how to use GenAi, it has time traveling :)",
      "*/",
      "",
      "const response = await client.responses.create({",
      "  model: 'gpt-4o',",
      "  instructions: 'You are a coding assistant that talks like a pirate',",
      "  input: 'Are semicolons optional in JavaScript?',",
      "});",
      "",
      "console.log(response.output_text);"
    ]
  },
  "genai-chat-messages": {
    "prefix": "node-genai-chat-messages",
    "body": [
      "/*",
      "  system/developer are instructions to the LLM",
      "  user is what the user says",
      "*/",
      "",
      "[",
        "{ role: 'developer', content: 'Speak like Sherlock Homes' }, // this is what was called system before",
        "{ role: 'user', content: 'Are semicolons optional in JavaScript?' }",
      "]"
    ]
  },
  "genai-chat-app" : {
    "prefix": "node-genai-chat-app",
    "body": [
      "/*", 
      "  Check out official docs at: https://github.com/openai/openai-node",
      "  Check out https://github.com/microsoft/generative-ai-with-javascript, for a fun free course on how to use GenAi, it has time traveling :)",
      "*/",
      "",
      "import OpenAI from 'openai';",

      "const client = new OpenAI({",
      "  apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted",
      "});",
      "",
      "const completion = await client.chat.completions.create({",
      "  model: 'gpt-4o',",
      "  messages: [",
      "    { role: 'developer', content: 'Speak like Sherlock Homes' }, // this is what was called system before",
      "    { role: 'user', content: 'Are semicolons optional in JavaScript?' },",
      "],",
      "});",
      "",
      "console.log(completion.choices[0].message.content);"
    ]  
  },
  "http-quark": {
    "prefix": "node-http-quark",
    "body": [
      "const quark = require('quarkhttp');",
      "const app = quark();",
      "app.get('/', (req, res) => res.send('hello world'))",
      "app.listen(3000, () => {",
      "  console.log('Server running on 3000');",
      "})"
    ],
    "description": "a micro HTTP framework, creates an app with a route"
  },
  "http-quark-get": {
    "prefix": "node-http-quark-get",
    "body": [
      "app.get('/products', (req, res) => res.json([{ id: 1, name: 'a product' }]))"
    ],
    "description": "a micro HTTP framework, adds a GET route"
  },
  "http-quark-post": {
    "prefix": "node-http-quark-post",
    "body": [
      "app.post('/products', (req,res) => {",
      "  console.info('body', req.body)",
      "  res.json(req.body);",
      "})"
    ],
    "description": "a micro HTTP framework, adds a POST route"
  },
  "http-quark-put": {
    "prefix": "node-http-quark-put",
    "body": [
      "app.put('/products', (req,res) => {",
      "  console.info('body', req.body)",
      "  res.json(req.body);",
      "})"
    ],
    "description": "a micro HTTP framework, adds a PUT route"
  },
  "http-quark-middleware": {
    "prefix": "node-http-quark-middleware",
    "body": [
      "app.get('/orders', (req, res, next) => {",
      "  if (req.headers['authorization'] === 'abc123') {",
      "    next()",
      "  } else {",
      "    res.statusCode = 401;",
      "    res.send('Not allowed')",
      "  }",
      "}, (req, res) => {",
      "  res.send('Protected route');",
      "})"
    ],
    "description": "a micro HTTP framework, adds a middleware"
  },
  "jest-suite": {
    "prefix": "node-jest-suite",
    "body": ["describe('$1', () => {", "  ", "})"]
  },
  "jest-test": {
    "prefix": "node-jest-test",
    "body": ["test('$1', () => {$2})"]
  },
  "jest-test-expect": {
    "prefix": "node-jest-test-expect",
    "body": ["test('$2', () => {", "  expect(1).toBe(2)", "})"]
  },
  "jest-expect": {
    "prefix": "node-jest-expect",
    "body": [" expect(1).toBe(2)"]
  },
  "jest-expect-to-equal": {
    "prefix": "node-jest-expect-to-equal",
    "body": ["let obj = { a: '1' }", "expect(obj).toEqual({ a: '1' })"]
  },
  "jest-test-expect-to-equal": {
    "prefix": "node-jest-test-expect-to-equal",
    "body": [
      "test('$2', () => {",
      "  let obj = { a: '1' }",
      "  expect(obj).toEqual({ a: '1' })",
      "})"
    ]
  },
  "jest-expect-to-throw": {
    "prefix": "node-jest-expect-to-throw",
    "body": [
      "const thisThrows = () => throw new Error('error message')",
      "expect(thisThrows).toThrow('error message')"
    ]
  },
  "jest-test-expect-to-throw": {
    "prefix": "node-jest-test-expect-to-throw",
    "body": [
      "test('$2', () => {",
      "  const thisThrows = () => throw new Error('error message')",
      "  expect(thisThrows).toThrow('error message')",
      "})"
    ]
  },
  "jest-test-beforeAll": {
    "prefix": "node-jest-test-beforeAll",
    "body": ["  beforeAll(() => {", "    ", "  })"]
  },
  "jest-test-afterAll": {
    "prefix": "node-jest-test-afterAll",
    "body": ["  afterAll(() => {", "    ", "  })"]
  },
  "regex-test-digits": {
    "prefix": "node-regex-test-digits",
    "body": ["const isMatch = /\\d+/.test('abc123')"],
    "description": "test if string contains digits, returns true/false"
  },
  "regex-test-word": {
    "prefix": "node-regex-test-word",
    "body": ["const isMatch = /\\w+/.test('abc123')"],
    "description": "test if string contains a word boundary, returns true/false"
  },
  "regex-test-match": {
    "prefix": "node-regex-match",
    "body": ["const [, extension] = 'file.txt'.match(/\\.(\\w+)/)"],
    "description": "matches a file extension"
  },
  "regex-test-match-named-group": {
    "prefix": "node-regex-match-named-group",
    "body": [
      "const { groups: { extension } } = 'file.txt'.match(/\\.(?<extension>\\w+)/)"
    ],
    "description": "matches a file extension, "
  },
  "express server": {
    "prefix": "node-express",
    "body": [
      "const express = require('express')",
      "const app = express()",
      "const port = 3000",
      "",
      "app.get('/', (req, res) => res.send('Hello World!'))",
      "app.listen(port, () => console.log(`Example app listening on port \\${port\\}!`))"
    ],
    "description": "Creates an express server"
  },
  "express GET": {
    "prefix": "node-express-get",
    "body": [
      "app.get('/', (req, res) => {",
      "  res.send('GET request to the homepage')",
      "})"
    ],
    "description": "Creates a GET route"
  },
  "express GET params": {
    "prefix": "node-express-get-params",
    "body": [
      "app.get('/books/:bookId', (req, res) => {",
      "  res.send(req.params.bookId)",
      "})"
    ],
    "description": "Creates a GET route and shows how to access params"
  },
  "express POST": {
    "prefix": "node-express-post",
    "body": [
      "app.post('/', function (req, res) {",
      "  res.send('POST request to the homepage')",
      "})"
    ],
    "description": "Creates a POST route"
  },
  "express POST params": {
    "prefix": "node-express-post-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.post('/update', function(req, res) {",
      "  const { name, description } = req.body;",
      "  res.send(`Name \\${name\\}, desc \\${description\\}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express PUT params": {
    "prefix": "node-express-put-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.put('/products', function(req, res) {",
      "  const { id, name, description } = req.body;",
      "  res.send(`Name \\${id\\} \\${name\\}, desc \\${description\\}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express DELETE params": {
    "prefix": "node-express-delete-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "app.delete('/products/:id', function(req, res) {",
      "  const { id } = req.params;",
      "  res.send(`Delete record with id \\${id\\}`);",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express QUERY params": {
    "prefix": "node-express-query-params",
    "body": [
      "var bodyParser = require('body-parser');",
      "app.use(bodyParser.json());",
      "",
      "// for routes looking like this `/products?page=1&pageSize=50`",
      "app.get('/products', function(req, res) {",
      "  const page = req.query.page;",
      "  const pageSize = req.query.pageSize;",
      "  res.send(`Filter with parameters \\${page\\} and \\${pageSize\\});`",
      "});"
    ],
    "description": "Creates a POST route that can read from the body"
  },
  "express POST params version >=4.16": {
    "prefix": "node-express-post-params-alt",
    "body": [
      "app.use(express.json())",
      "app.listen(8080)",
      "",
      "app.post('/test', (req, res) => {",
      "  res.json({ body: req.body })",
      "});"
    ],
    "description": "Creates a POST route that can read from the body, works for 4.16 version of express and above"
  },
  "express middleware": {
    "prefix": "node-express-middleware-logger",
    "body": [
      "const logger = function (req, res, next) {",
      "  console.log('logging')",
      "  next()",
      "}",
      "",
      "app.use(logger)",
      "",
      "app.get('/', (req, res) => {",
      "  res.send('Hello World!')",
      "})"
    ],
    "description": "Creates a middleware"
  },
  "express middleware error": {
    "prefix": "node-express-middleware-error",
    "body": [
      "app.use(function (err, req, res, next) {",
      "  console.error(err.stack)",
      "  res.status(500).send('Something broke!')",
      "});"
    ],
    "description": "Creates a error middleware"
  },
  "http server": {
    "prefix": "node-http-server",
    "body": [
      "var http = require('http');",
      "http.createServer(function (request, response) {",
      "  response.writeHead(200, {'Content-Type': 'text/plain'});",
      "  response.end('Hello World');",
      "}).listen(8081);",
      "",
      "console.log('Server running at http://127.0.0.1:8081/');"
    ],
    "description": "Creates a simple HTTP server"
  },
  "file read sync": {
    "prefix": "node-file-read-sync",
    "body": [
      "var fs = require('fs');",
      "var data = fs.readFileSync('file.txt');"
    ],
    "description": "Reads a file synchronously"
  },
  "file read async": {
    "prefix": "node-file-read-async",
    "body": [
      "var fs = require('fs');",
      "fs.readFile('input.txt', function (err, data) {",
      "  if (err) return console.error(err);",
      "  console.log(data.toString());",
      "});"
    ],
    "description": "Reads a file asynchronously"
  },
  "event emitter": {
    "prefix": "node-event-emitter",
    "body": [
      "var events = require('events');",
      "var eventEmitter = new events.EventEmitter();",
      "eventEmitter.emit('my_event');",
      "eventEmitter.on('my_event', () => {",
      "  console.log('data received successfully.');",
      "});"
    ],
    "description": "Event emitter, shows emitting event and subscribing to it"
  },
  "Promise creation": {
    "prefix": "node-promise-create",
    "body": [
      "new Promise((resolve, reject) => {",
      "  let condition = false;",
      "  if(condition) {",
      "    resolve('data')",
      "  } else {",
      "    reject('error')",
      "}",
      "})"
    ],
    "description": "creates a Promise by instantiating it"
  },
  "Promise shorthand": {
    "prefix": "node-promise-shorthand",
    "body": [
      "const promiseThatWillResolve = Promise.resolve('data');",
      "const promiseThatWillReject = Promise.reject('error');"
    ],
    "description": "uses the static resolve/reject, good for unit tests"
  },
  "Promise all": {
    "prefix": "node-promise-all",
    "body": [
      "const getData = () => Promise.resolve('data');",
      "const getMoreData = () => Promise.resolve('more data');",
      "",
      "Promise.all(",
      "  getData(),",
      "  getMoreData()",
      ").then(result => {",
      "  const [data, moreData] = result;",
      "})"
    ],
    "description": "uses the static all(), allows us to have a list of Promises finish at the same time"
  },
  "Async/await": {
    "prefix": "node-async-await",
    "body": [
      "async function getData() {",
      "  return Promise.resolve('data');",
      "}",
      "",
      "async function getMoreData(data) {",
      "  return Promise.resolve(data + 'more data');",
      "}",
      "",
      "async function getAll() {",
      "  const data = await getData();",
      "  const moreData = await getMoreData(data);",
      "  return `All the data: \\${data\\}, \\${moreData\\}`;",
      "}",
      "",
      "getAll().then((all) => {",
      "  console.log('all the data')",
      "})"
    ],
    "description": "demonstrates async/await"
  },
  "Joi schema validation": {
    "prefix": "node-express-schema-validation",
    "body": [
      "const Joi = require('joi');",
      "const loginSchema = Joi.object().keys({",
      "  username: Joi.string()",
      "    .min(3)",
      "    .max(10)",
      "    .required(),",
      "  password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/)",
      "});",
      "",
      "app.post('/login', function(req, res) {",
      "  const valid = Joi.validate(req.body, loginSchema).error === null;",
      "  if (!valid) {",
      "    res.status(422).json({",
      "      status: 'error',",
      "      message: 'Invalid request data',",
      "      data: req.body",
      "    });",
      "  } else {",
      "    // happy days - login user",
      "    res.send(`ok`);",
      "  }",
      "});"
    ],
    "description": "showcases the lib Joi and how you can use it to validate incoming requests"
  },
  "supertest-init": {
    "prefix": "node-supertest-init",
    "body": [
      "const supertest = require('supertest')",
      "const app = require('../app');",
      "const server = app.listen(3000, () => {",
      "  console.log('listening at port 3000')",
      "})",
      "let request;"
    ],
    "description": "Sets up supertest by importing supertest and the app you mean to test. Additionally starts the app"
  },
  "supertest-beforeall": {
    "prefix": "node-supertest-beforeall",
    "body": ["beforeAll(() => {", "  request = supertest(app)", "})"],
    "description": "Configures supertest to use the app, this is needed"
  },
  "supertest-afterall": {
    "prefix": "node-supertest-aftereall",
    "body": [
      "afterAll(async(close) => {",
      "  server.close(() => {",
      "    close()",
      "   console.log('server closed');",
      "  })",
      "})"
    ],
    "description": "Ensures the web app closes down after the test run, this is needed"
  },
  "supertest-testGET": {
    "prefix": "node-supertest-testget",
    "body": [
      "test('testing a GET route', async () => {",
      "  let products = [",
      "  {",
      "    id: 1,",
      "    name: 'book'",
      "  },",
      "  {",
      "    id: 2,",
      "    name: 'book2'",
      "  }",
      " ];",
      "",
      "  const res = await request.get('/products');",
      "  expect(res.status).toBe(200);",
      "  expect(res.body).toEqual(products);",
      "})"
    ],
    "description": "An example of supertest testing a GET route"
  },
  "supertest-testGETWithParam": {
    "prefix": "node-supertest-testgetwithparam",
    "body": [
      "test('testing a GET route with router param', async () => {",
      "  let product = {",
      "    id: 1,",
      "    name: 'book'",
      "  };",
      "  const res = await request.get('/products/1');",
      "  expect(res.status).toBe(200);",
      "  expect(res.body).toEqual(product);",
      "});"
    ],
    "description": "An example of supertest testing a GET route with a route parameter"
  },
  "supertest-testPOSTWithParam": {
    "prefix": "node-supertest-testpost",
    "body": [
      "test('testing a POST route with a payload', async () => {",
      "  let product = {",
      "    name: 'book3'",
      "  };",
      "  const res = await request",
      "  .post('/products')",
      "  .send(product);",
      "  expect(res.status).toBe(200);",
      "  expect(res.body).toEqual({ id: 3, ...product});",
      "",
      "  const newRes = await request.get('/products');",
      "  let products = [",
      "  {",
      "    id: 1,",
      "    name: 'book'",
      "  },",
      "  {",
      "    id: 2,",
      "    name: 'book2'",
      "  },",
      "  {",
      "    id: 3,",
      "    name: 'book3',",
      "  }",
      " ];",
      "  expect(newRes.body).toEqual(products);",
      "});"
    ],
    "description": "An example of supertest testing a POST route with a payload"
  }
}
